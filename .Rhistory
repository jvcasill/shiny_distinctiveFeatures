#   data.frame(rower = 'joseph',
#              trial = 4,
#              time = 5,
#              distance = 1549))
# Save to file
# write.table(df_individual, "./data/rowvember.csv", row.names = F, quote = F, sep = ",")
# Load all data
temp <- list.files(path = "./data/", full.names = TRUE, pattern = ".csv")
myfiles = lapply(temp[-1], read.csv, sep = ",")
df <- do.call("rbind", myfiles)
df <- mutate(df,
trial = as.factor(trial),
time = as.numeric(time),
distance = as.numeric(distance))
str(df)
# Total meters
df_individual %>%
summarize(., sum(distance))
# Total meters per week
df_individual %>%
group_by(., time) %>%
summarise(., sum(distance))
# Total meters per week
df_individual %>%
group_by(., time) %>%
summarise(., sum(distance)) %>%
print(.)
# Total meters per week
df_individual %>%
group_by(., time) %>%
summarise(., sum(distance)) %>%
print(.)
# Plot avg distance for each time
df_individual %>%
ggplot(., aes(x = time, y = distance)) +
stat_summary(fun.data = mean_se, geom = 'errorbar', width = 0.1) +
stat_summary(fun.y = mean, geom = 'point', color = 'darkred', size = 2) +
stat_summary(fun.y = mean, geom = 'point', color = 'darkgrey', size = 1.25) +
stat_summary(aes(y = fitted(fit)), fun.y = mean, geom = 'line') +
scale_x_continuous(breaks = c(2, 3, 4, 5),
labels = c('2min', '3min', '4min', '5min')) +
xlab('Time interval') + ylab('Average distance (m)') +
theme_bw()
# Calculate mean value per time session and fit uncon. GCA
# Create higher order orthogonal polynomial
df_individual <- as.data.frame(df_individual)
t <- poly(unique(df_individual$time), 2)
df_individual[df_individual$time == 2, 'ot1'] <- t[1, 1]
df_individual[df_individual$time == 3, 'ot1'] <- t[2, 1]
df_individual[df_individual$time == 4, 'ot1'] <- t[3, 1]
df_individual[df_individual$time == 5, 'ot1'] <- t[4, 1]
df_individual[df_individual$time == 2, 'ot2'] <- t[1, 2]
df_individual[df_individual$time == 3, 'ot2'] <- t[2, 2]
df_individual[df_individual$time == 4, 'ot2'] <- t[3, 2]
df_individual[df_individual$time == 5, 'ot2'] <- t[4, 2]
fit <- lmer(distance ~ (ot1+ot2) + ((ot1+ot2) | trial), data = df_individual, REML = FALSE)
summary(fit)
# Plot avg distance for each time
df_individual %>%
ggplot(., aes(x = time, y = distance)) +
stat_summary(fun.data = mean_se, geom = 'errorbar', width = 0.1) +
stat_summary(fun.y = mean, geom = 'point', color = 'darkred', size = 2) +
stat_summary(fun.y = mean, geom = 'point', color = 'darkgrey', size = 1.25) +
stat_summary(aes(y = fitted(fit)), fun.y = mean, geom = 'line') +
scale_x_continuous(breaks = c(2, 3, 4, 5),
labels = c('2min', '3min', '4min', '5min')) +
xlab('Time interval') + ylab('Average distance (m)') +
theme_bw()
# Plot avg distance for each time
df_individual %>%
ggplot(., aes(x = time, y = distance)) +
stat_summary(fun.data = mean_se, geom = 'errorbar', width = 0.1) +
stat_summary(fun.y = mean, geom = 'point', color = 'darkred', size = 2) +
stat_summary(fun.y = mean, geom = 'point', color = 'darkgrey', size = 1.25) +
stat_summary(aes(y = fitted(fit)), fun.y = mean, geom = 'line') +
scale_x_continuous(breaks = c(2, 3, 4, 5),
labels = c('2min', '3min', '4min', '5min')) +
xlab('Time interval') + ylab('Average distance (m)') +
theme_bw()
# Plot avg distance for each time
df_individual %>%
ggplot(., aes(x = time, y = distance)) +
stat_summary(fun.data = mean_se, geom = 'errorbar', width = 0.1) +
stat_summary(fun.y = mean, geom = 'point', color = 'darkred', size = 2) +
stat_summary(fun.y = mean, geom = 'point', color = 'darkgrey', size = 1.25) +
stat_summary(aes(y = fitted(fit)), fun.y = mean, geom = 'line') +
scale_x_continuous(breaks = c(2, 3, 4, 5),
labels = c('2min', '3min', '4min', '5min')) +
xlab('Time interval') + ylab('Average distance (m)') +
theme_bw()
# Plot distance per trial
df_individual %>%
ggplot(., aes(x = trial, y = distance, color = as.factor(time))) +
geom_point() +
theme_bw()
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
# 3D plot
with(df_individual, scatter3D(x = trial, y = time, z = distance,
colvar = distance, pch = 19, cex = 0.5, phi = 10, bty = 'g',
type = 'h', ticktype = "detailed", xlab = 'Trial', ylab = 'Time',
zlab = 'Distame (m)', zlim = c(0, 1800), xlim = c(0, 4.2),
ylim = c(1.8, 5.2), col = gg.col(100)))
2 _ 2
2 + 2
install.packages(c("car", "data.table", "lmerTest"))
info()
Sys.info()
install.packages(c("mgcv", "survival"))
biVarPlot(data = cars, x = disp, y = speed)
library(lingStuff)
biVarPlot(data = cars, x = disp, y = speed)
biVarPlot(data = cars, x = dist, y = speed)
getwd()
library(knitr)
spin(testSping.R)
spin('testSping.R')
spin('testSping.R')
spin('testSping.R')
spin('testSping.R')
spin('testSping.R')
spin('testSping.R')
install.packages("googleAuthR")
install.packages("googleAnalyticsR")
library(googleAnalyticsR)
ga_auth()
account_list <- google_analytics_account_list()
ga_auth()
ls()
library(googleAnalyticsR)
ga_auth()
install.packages(c("rgdal", "sjstats"))
install.packages("tweenr")
library(ggplot2)
library(gganimate)
library(ggforce)
library(tweenr)
# Making up data
t <- data.frame(x=0, y=0, colour = 'forestgreen', size=1, alpha = 1,
stringsAsFactors = FALSE)
t <- t[rep(1, 12),]
t$alpha[2:12] <- 0
t2 <- t
t2$y <- 1
t2$colour <- 'firebrick'
t3 <- t2
t3$x <- 1
t3$colour <- 'steelblue'
t4 <- t3
t4$y <- 0
t4$colour <- 'goldenrod'
t5 <- t4
c <- ggforce::radial_trans(c(1,1), c(1, 12))$transform(rep(1, 12), 1:12)
t5$x <- (c$x + 1) / 2
t5$y <- (c$y + 1) / 2
t5$alpha <- 1
t5$size <- 0.5
t6 <- t5
t6 <- rbind(t5[12,], t5[1:11, ])
t6$colour <- 'firebrick'
t7 <- rbind(t6[12,], t6[1:11, ])
t7$colour <- 'steelblue'
t8 <- t7
t8$x <- 0.5
t8$y <- 0.5
t8$size <- 2
t9 <- t
ts <- list(t, t2, t3, t4, t5, t6, t7, t8, t9)
tweenlogo <- data.frame(x=0.5, y=0.5, label = 'tweenr', stringsAsFactors = F)
tweenlogo <- tweenlogo[rep(1, 60),]
tweenlogo$.frame <- 316:375
install.packages("gganimate")
install.packages("ggforce")
devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
library(ggforce)
library(tweenr)
# Making up data
t <- data.frame(x=0, y=0, colour = 'forestgreen', size=1, alpha = 1,
stringsAsFactors = FALSE)
t <- t[rep(1, 12),]
t$alpha[2:12] <- 0
t2 <- t
t2$y <- 1
t2$colour <- 'firebrick'
t3 <- t2
t3$x <- 1
t3$colour <- 'steelblue'
t4 <- t3
t4$y <- 0
t4$colour <- 'goldenrod'
t5 <- t4
c <- ggforce::radial_trans(c(1,1), c(1, 12))$transform(rep(1, 12), 1:12)
t5$x <- (c$x + 1) / 2
t5$y <- (c$y + 1) / 2
t5$alpha <- 1
t5$size <- 0.5
t6 <- t5
t6 <- rbind(t5[12,], t5[1:11, ])
t6$colour <- 'firebrick'
t7 <- rbind(t6[12,], t6[1:11, ])
t7$colour <- 'steelblue'
t8 <- t7
t8$x <- 0.5
t8$y <- 0.5
t8$size <- 2
t9 <- t
ts <- list(t, t2, t3, t4, t5, t6, t7, t8, t9)
tweenlogo <- data.frame(x=0.5, y=0.5, label = 'tweenr', stringsAsFactors = F)
tweenlogo <- tweenlogo[rep(1, 60),]
tweenlogo$.frame <- 316:375
tf <- tween_states(ts, tweenlength = 2, statelength = 1,
ease = c('cubic-in-out', 'elastic-out', 'bounce-out',
'cubic-out', 'sine-in-out', 'sine-in-out',
'circular-in', 'back-out'),
nframes = 375)
p <- ggplot(data=tf, aes(x=x, y=y)) +
geom_text(aes(label = label, frame = .frame), data=tweenlogo, size = 13) +
geom_point(aes(frame = .frame, size=size, alpha = alpha, colour = colour)) +
scale_colour_identity() +
scale_alpha(range = c(0, 1), guide = 'none') +
scale_size(range = c(4, 60), guide = 'none') +
expand_limits(x=c(-0.36, 1.36), y=c(-0.36, 1.36)) +
theme_bw()
animation::ani.options(interval = 1/15)
gg_animate(p, "dancing ball.gif", title_frame = F, ani.width = 400,
ani.height = 400)
tf <- tween_states(ts, tweenlength = 2, statelength = 1,
ease = c('cubic-in-out', 'elastic-out', 'bounce-out',
'cubic-out', 'sine-in-out', 'sine-in-out',
'circular-in', 'back-out'),
nframes = 375)
# Animate with gganimate
p <- ggplot(data=tf, aes(x=x, y=y)) +
geom_text(aes(label = label, frame = .frame), data=tweenlogo, size = 13) +
geom_point(aes(frame = .frame, size=size, alpha = alpha, colour = colour)) +
scale_colour_identity() +
scale_alpha(range = c(0, 1), guide = 'none') +
scale_size(range = c(4, 60), guide = 'none') +
expand_limits(x=c(-0.36, 1.36), y=c(-0.36, 1.36)) +
theme_bw()
animation::ani.options(interval = 1/15)
gg_animate(p, "dancing ball.gif", title_frame = F, ani.width = 400,
ani.height = 400)
library(gganimate)
library(ggforce)
library(tweenr)
p <- ggplot(data=tf, aes(x=x, y=y)) +
geom_text(aes(label = label, frame = .frame), data=tweenlogo, size = 13) +
geom_point(aes(frame = .frame, size=size, alpha = alpha, colour = colour)) +
scale_colour_identity() +
scale_alpha(range = c(0, 1), guide = 'none') +
scale_size(range = c(4, 60), guide = 'none') +
expand_limits(x=c(-0.36, 1.36), y=c(-0.36, 1.36)) +
theme_bw()
p
gg_animate(p, "dancing ball.gif", title_frame = F, ani.width = 400,
ani.height = 400)
library("gganimate", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
gg_animate(p, "dancing ball.gif", title_frame = F, ani.width = 400,
ani.height = 400)
gganimate(p, "dancing ball.gif", title_frame = F, ani.width = 400,
ani.height = 400)
devtools::install_github("thomasp85/tweenr")
library(ggplot2)
library(gganimate)
library(ggforce)
library(tweenr)
# Making up data
t <- data.frame(x=0, y=0, colour = 'forestgreen', size=1, alpha = 1,
stringsAsFactors = FALSE)
t <- t[rep(1, 12),]
t$alpha[2:12] <- 0
t2 <- t
t2$y <- 1
t2$colour <- 'firebrick'
t3 <- t2
t3$x <- 1
t3$colour <- 'steelblue'
t4 <- t3
t4$y <- 0
t4$colour <- 'goldenrod'
t5 <- t4
c <- ggforce::radial_trans(c(1,1), c(1, 12))$transform(rep(1, 12), 1:12)
t5$x <- (c$x + 1) / 2
t5$y <- (c$y + 1) / 2
t5$alpha <- 1
t5$size <- 0.5
t6 <- t5
t6 <- rbind(t5[12,], t5[1:11, ])
t6$colour <- 'firebrick'
t7 <- rbind(t6[12,], t6[1:11, ])
t7$colour <- 'steelblue'
t8 <- t7
t8$x <- 0.5
t8$y <- 0.5
t8$size <- 2
t9 <- t
ts <- list(t, t2, t3, t4, t5, t6, t7, t8, t9)
tweenlogo <- data.frame(x=0.5, y=0.5, label = 'tweenr', stringsAsFactors = F)
tweenlogo <- tweenlogo[rep(1, 60),]
tweenlogo$.frame <- 316:375
# Using tweenr
tf <- tween_states(ts, tweenlength = 2, statelength = 1,
ease = c('cubic-in-out', 'elastic-out', 'bounce-out',
'cubic-out', 'sine-in-out', 'sine-in-out',
'circular-in', 'back-out'),
nframes = 375)
# Animate with gganimate
p <- ggplot(data=tf, aes(x=x, y=y)) +
geom_text(aes(label = label, frame = .frame), data=tweenlogo, size = 13) +
geom_point(aes(frame = .frame, size=size, alpha = alpha, colour = colour)) +
scale_colour_identity() +
scale_alpha(range = c(0, 1), guide = 'none') +
scale_size(range = c(4, 60), guide = 'none') +
expand_limits(x=c(-0.36, 1.36), y=c(-0.36, 1.36)) +
theme_bw()
animation::ani.options(interval = 1/15)
gganimate(p, "dancing ball.gif", title_frame = F, ani.width = 400,
ani.height = 400)
library(ggplot2)
library(gganimate)
library(ggforce)
library(tweenr)
# Making up data
t <- data.frame(x=0, y=0, colour = 'forestgreen', size=1, alpha = 1,
stringsAsFactors = FALSE)
t <- t[rep(1, 12),]
t$alpha[2:12] <- 0
t2 <- t
t2$y <- 1
t2$colour <- 'firebrick'
t3 <- t2
t3$x <- 1
t3$colour <- 'steelblue'
t4 <- t3
t4$y <- 0
t4$colour <- 'goldenrod'
t5 <- t4
c <- ggforce::radial_trans(c(1,1), c(1, 12))$transform(rep(1, 12), 1:12)
t5$x <- (c$x + 1) / 2
t5$y <- (c$y + 1) / 2
t5$alpha <- 1
t5$size <- 0.5
t6 <- t5
t6 <- rbind(t5[12,], t5[1:11, ])
t6$colour <- 'firebrick'
t7 <- rbind(t6[12,], t6[1:11, ])
t7$colour <- 'steelblue'
t8 <- t7
t8$x <- 0.5
t8$y <- 0.5
t8$size <- 2
t9 <- t
ts <- list(t, t2, t3, t4, t5, t6, t7, t8, t9)
tweenlogo <- data.frame(x=0.5, y=0.5, label = 'tweenr', stringsAsFactors = F)
tweenlogo <- tweenlogo[rep(1, 60),]
tweenlogo$.frame <- 316:375
# Using tweenr
tf <- tween_states(ts, tweenlength = 2, statelength = 1,
ease = c('cubic-in-out', 'elastic-out', 'bounce-out',
'cubic-out', 'sine-in-out', 'sine-in-out',
'circular-in', 'back-out'),
nframes = 375)
# Animate with gganimate
p <- ggplot(data=tf, aes(x=x, y=y)) +
geom_text(aes(label = label, frame = .frame), data=tweenlogo, size = 13) +
geom_point(aes(frame = .frame, size=size, alpha = alpha, colour = colour)) +
scale_colour_identity() +
scale_alpha(range = c(0, 1), guide = 'none') +
scale_size(range = c(4, 60), guide = 'none') +
expand_limits(x=c(-0.36, 1.36), y=c(-0.36, 1.36)) +
theme_bw()
animation::ani.options(interval = 1/15)
gganimate(p, "dancing ball.gif", title_frame = F, ani.width = 400,
ani.height = 400)
gg_animate(p, "dancing ball.gif", title_frame = F, ani.width = 400,
ani.height = 400)
# Making up data
d <- data.frame(x = rnorm(20), y = rnorm(20), time = sample(100, 20), alpha = 0,
size = 1, ease = 'elastic-out', id = 1:20,
stringsAsFactors = FALSE)
d2 <- d
d2$time <- d$time + 10
d2$alpha <- 1
d2$size <- 3
d2$ease <- 'linear'
d3 <- d2
d3$time <- d2$time + sample(50:100, 20)
d3$size = 10
d3$ease <- 'bounce-out'
d4 <- d3
d4$y <- min(d$y) - 0.5
d4$size <- 2
d4$time <- d3$time + 10
d5 <- d4
d5$time <- max(d5$time)
df <- rbind(d, d2, d3, d4, d5)
# Using tweenr
dt <- tween_elements(df, 'time', 'id', 'ease', nframes = 500)
# Animate with gganimate
p <- ggplot(data = dt) +
geom_point(aes(x=x, y=y, size=size, alpha=alpha, frame = .frame)) +
scale_size(range = c(0.1, 20), guide = 'none') +
scale_alpha(range = c(0, 1), guide = 'none') +
ggforce::theme_no_axes()
animation::ani.options(interval = 1/24)
gg_animate(p, 'dropping balls.gif', title_frame = F)
p
gganimate(p, 'dropping balls.gif', title_frame = F)
library(gapminder)
library(ggplot2)
theme_set(theme_bw())
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() +
scale_x_log10()
p
data(gapminder)
library(gapminder)
install.packages("gapminder")
library(gapminder)
library(ggplot2)
theme_set(theme_bw())
data(gapminder)
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() +
scale_x_log10()
p
library(gganimate)
gganimate(p)
getwd()
gganimate(p, "output.gif")
gganimate(p, "output.gif", interval = .2)
?gganimate()
gganimate(p, "output.gif", interval = .2)
gganimate(p, interval = .2)
rm(list = ls(all = TRUE))
setwd("~/code/shiny_apps/shiny_distinctiveFeatures")
shiny::runApp()
runApp()
runApp()
